kind: pipeline
name: default

steps:
    
- name: lint
  image: node:buster
  volumes:
  - name: node_modules
    path: /usr/local/lib/node_modules
  commands:
  - npm install -g stylelint stylelint-config-standard jslint
  - npx stylelint "themes/crisp/css/*.css"
  - jslint "themes/crisp/js/!(*.min).js"
    
#- name: clone_phoenix
#  image: alpine/git
#  volumes:
#  - name: phoenix
#    path: /phoenix
#  commands:
#  - git clone https://github.com/tosdr/edit.tosdr.org /phoenix
    
#- name: install_phoenix
#  image: ruby:2.7.2
#  volumes:
#  - name: bundle
#    path: /usr/local/bundle
#  - name: phoenix
#    path: /phoenix
#  environment:
#    DATABASE_HOST: postgres
#    RAILS_ENV: development
#    DATABASE_USER: postgres
#  commands:
#  - cd /phoenix
#  - gem install bundler
#  - gem install rails
#  - bundle install
#  - rails db:create db:migrate db:seed
#  - echo 'u = Service.create :id => 1, :name => "Test Service", :url => "example.com", :created_at => "now()", :updated_at => "now()", :slug => "test_slug"' | rails c -e development

- name: create_postgres_db
  image: postgres:9-alpine
  commands:
  - psql -h postgres -U postgres -c "CREATE DATABASE tosdr_dev;"
  
- name: create_crisp_config
  image: alpine
  commands:
  - echo -e "MYSQL_HOSTNAME=postgres\n" > .env
  - echo -e "MYSQL_USERNAME=postgres\n" >> .env
  - echo -e "MYSQL_PASSWORD=postgres\n" >> .env
  - echo -e "MYSQL_DATABASE=tosdr_dev\n" >> .env
  - echo -e "REDIS_HOST=redis\n" >> .env
  - echo -e "REDIS_PORT=6379\n" >> .env
    

- name: migrate_crisp_lint
  image: php:8.0-buster
  environment:
    COMPOSER_ALLOW_SUPERUSER: 1
  commands:
  - mkdir /tmp/ci
  - cd /tmp/ci
  - apt-get update && apt-get install -y libpq-dev autoconf gcc libc6-dev make libicu-dev wget git-core zip
  - pecl install redis-5.3.2
  - docker-php-ext-install pgsql pdo_pgsql pdo_mysql intl
  - docker-php-ext-enable pdo_pgsql pdo_mysql redis intl
  - wget https://getcomposer.org/composer-stable.phar -O /tmp/ci/composer
  - cd /drone/src
  - php /tmp/ci/composer install
  - php bin/cli.php migrate
  - php bin/cli.php theme install crisp
#  - vendor/bin/twig-linter lint themes/crisp/templates/
#  - vendor/bin/phpunit tests --bootstrap pixelcatproductions/crisp.php
  - rm /tmp/ci/composer
  
- name: Zip Production
  image: node:alpine
  commands:
  - apk --no-cache add zip bash
  - mkdir dist
  - zip -r dist/build.zip ./ -x '*.git*' -x 'pixelcatproductions/cache' -x '.env' -x 'static' -x '.vscode' -x 'dist' -x 'nbproject'
  when:
      branch:
      - master
      event:
      - push
  
- name: Upload Build Artifacts
  image: plugins/s3
  settings:
    bucket: tosdr-artifacts
    source: ./dist/*
    strip_prefix: true
    access_key:
      from_secret: aws_access_key_id
    secret_key:
      from_secret: aws_secret_access_key
    target: /CrispCMS/builds/${DRONE_BUILD_NUMBER}
    endpoint: https://s3.eu-west-2.jbcdn.net
  when:
      branch:
      - master
      event:
      - push
      
- name: Deploy Production
  image: appleboy/drone-ssh
  settings:
    host: 
        from_secret: SSH_HOST
    username:
        from_secret: SSH_USER
    key:
        from_secret: SSH_KEY
    port: 22
    script:
      - echo Test
  when:
    event:
    - promote

#- name: docker  
#  image: plugins/docker
#  settings:
#    username:
#      from_secret: DOCKER_USERNAME
#    password:
#      from_secret: DOCKER_TOKEN
#    repo: jbackpcat/tosdr-crisp
#    tags: latest
#  when:
#    event:
#        exclude:
#        - pull_request
#        - tag

volumes:
- name: bundle
  temp: {}
- name: phoenix
  temp: {}
- name: node_modules
  temp: {}
  
services:
- name: redis
  image: redis
- name: postgres
  image: postgres
  environment:
    POSTGRES_USER: postgres
    POSTGRES_DB: postgres
    POSTGRES_HOST_AUTH_METHOD: trust
